#!/bin/bash

# Credit: https://wiki.archlinux.org/index.php/Color_Bash_Prompt

# Reset
C_OFF='\033[0m'             # Text Reset

# Regular Colors
C_BLACK='\033[0;30m'        # Black
C_RED='\033[0;31m'          # Red
C_GREEN='\033[0;32m'        # Green
C_YELLOW='\033[0;33m'       # Yellow
C_BLUE='\033[0;34m'         # Blue
C_PURPLE='\033[0;35m'       # Purple
C_CYAN='\033[0;36m'         # Cyan
C_WHITE='\033[0;37m'        # White

# Bold
C_BBLACK='\033[1;30m'       # Black
C_BRED='\033[1;31m'         # Red
C_BGREEN='\033[1;32m'       # Green
C_BYELLOW='\033[1;33m'      # Yellow
C_BBLUE='\033[1;34m'        # Blue
C_BPURPLE='\033[1;35m'      # Purple
C_BCYAN='\033[1;36m'        # Cyan
C_BWHITE='\033[1;37m'       # White

# Underline
C_UBLACK='\033[4;30m'       # Black
C_URED='\033[4;31m'         # Red
C_UGREEN='\033[4;32m'       # Green
C_UYELLOW='\033[4;33m'      # Yellow
C_UBLUE='\033[4;34m'        # Blue
C_UPURPLE='\033[4;35m'      # Purple
C_UCYAN='\033[4;36m'        # Cyan
C_UWHITE='\033[4;37m'       # White

# Background
C_ON_BLACK='\033[40m'       # Black
C_ON_RED='\033[41m'         # Red
C_ON_GREEN='\033[42m'       # Green
C_ON_YELLOW='\033[43m'      # Yellow
C_ON_BLUE='\033[44m'        # Blue
C_ON_PURPLE='\033[45m'      # Purple
C_ON_CYAN='\033[46m'        # Cyan
C_ON_WHITE='\033[47m'       # White

# High Intensty
C_IBLACK='\033[0;90m'       # Black
C_IRED='\033[0;91m'         # Red
C_IGREEN='\033[0;92m'       # Green
C_IYELLOW='\033[0;93m'      # Yellow
C_IBLUE='\033[0;94m'        # Blue
C_IPURPLE='\033[0;95m'      # Purple
C_ICYAN='\033[0;96m'        # Cyan
C_IWHITE='\033[0;97m'       # White

# Bold High Intensty
C_BIBLACK='\033[1;90m'      # Black
C_BIRED='\033[1;91m'        # Red
C_BIGREEN='\033[1;92m'      # Green
C_BIYELLOW='\033[1;93m'     # Yellow
C_BIBLUE='\033[1;94m'       # Blue
C_BIPURPLE='\033[1;95m'     # Purple
C_BICYAN='\033[1;96m'       # Cyan
C_BIWHITE='\033[1;97m'      # White

# High Intensty backgrounds
C_ON_IBLACK='\033[0;100m'   # Black
C_ON_IRED='\033[0;101m'     # Red
C_ON_IGREEN='\033[0;102m'   # Green
C_ON_IYELLOW='\033[0;103m'  # Yellow
C_ON_IBLUE='\033[0;104m'    # Blue
C_ON_IPURPLE='\033[10;95m'  # Purple
C_ON_ICYAN='\033[0;106m'    # Cyan
C_ON_IWHITE='\033[0;107m'   # White


# Finds the directory containing a file.
#
# @param $1 The filename.
# @returns Assigns the directory to `bake_result`.
upsearch () {
  # from: http://unix.stackexchange.com/questions/13464/is-there-a-way-to-find-a-file-in-an-inverse-recursive-search
  local slashes=${PWD//[^\/]/}
  local directory=$PWD
  for (( n=${#slashes}; n>0; --n )); do
    test -e $directory/$1 && bake_result=$directory && return
    directory=$directory/..
  done
  bake_result=""
}

# Prints task list. Tasks are marked by preceding a function with a comment
# that starts with `# @task`
#
# Example:
#   # @task Build the project
#   task() { }
#
# @param $1 Bakefile
task_list () {

    export BAKE_TASK_LIST=${BAKE_TASK_LIST:-}

    set +e
    while read -r description; do

      if [[ "${description}" != "--" ]]; then
        if read -r declaration && [[ "${declaration}" != "--" ]]; then
          read -r; # consume divider
          local name=$(echo $declaration | sed 's/function //' | sed 's/( *)//' | sed 's/ *{//' | tr -d ' ')
          line=$(echo $description | sed 's/^#[.]/'$name'/')
          export BAKE_TASK_LIST="${BAKE_TASK_LIST}|${line}"
        fi
      fi
    done < <(cat $1 | grep -E '^(function [A-Za-z0-9_:-]+\s*{|[A-Za-z0-9_:-]+\s*\(\)\s*{)' -B 1)
    set -e
}

# Print the currently loaded task list
#
print_task_list () {
    local max_width=0
    local list=$(echo "${BAKE_TASK_LIST:1}" |tr "|" "\n"|sort -u)
    while read -r name desc; do
        if [[ ${#name} -gt $max_width ]]; then
            max_width=${#name}
        fi
    done < <(echo "${list}")
    ((max_width+=2))

    while read -r name desc; do
      if [[ -n "${name}" ]]; then
        desc=$(echo ${desc} | sed 's/params:/\'${C_IGREEN}'params:\'${C_CYAN}'/')
        printf "${C_GREEN}%-${max_width}s${C_OFF} ${desc}${C_OFF}\n" $name
      fi
    done < <(echo "${list}")

    # submodules
    if [[ -n "$(find "${bakefile_dir:-.}" -mindepth 2 -maxdepth 2 -name Bakefile -type f)" ]]; then
        printf "\n${C_IGREEN}submodules:${C_OFF}\n"
        for submodule in $(find . -mindepth 2 -maxdepth 2 -name Bakefile -type f); do
            echo "$(basename $(dirname $submodule))"
        done
    fi

}

# Includes an external script.
#
# @param $1 File pattern to include
include () {

    local abs_bakefile_dir=$(cd $bakefile_dir 2>/dev/null && pwd || true)
    local incoming_directory=$(pwd)
    if [[ $abs_bakefile_dir == $incoming_directory* ]] && [[ $abs_bakefile_dir != $incoming_directory ]]; then
        # if bakefile_dir is a subdirectory of PWD, jump to bakefile_dir
        pushd $abs_bakefile_dir  > /dev/null
    fi

    local files=$1
    for file in $(ls $files); do
        task_list $file
        pushd $(dirname $file) > /dev/null
        source $(basename $file)
        popd > /dev/null
    done
    if [[ $abs_bakefile_dir == $incoming_directory* ]] && [[ $abs_bakefile_dir != $incoming_directory ]]; then
        popd  > /dev/null
    fi
}

# Invokes function once.
#
# @param $1 Function to invoke.
invoke () {
    local invoked
    for f in "$@"; do
        f=${f//-/____}
        set +ue
        eval "invoked=\$${f}_invoked"
        set -ue
        if [ ! "$invoked" == "1" ]; then
            eval "${f}_invoked=1"
            "$@"
        fi
    done
}

# Converts name=value arguments to vars
#
# @example
#   bake_params "rows" "columns"
#
# @param... Names of vars
function bake_params {
  set +ue
  for param in "$@"; do
    local val=$(eval echo \${$param:-})
    if [ -z "$val" ]; then
      bake_error "'$param' parameter is missing." && exit 1
    fi
  done
  set -ue
}

# Prints a log message with no color.
#
# @example
#   bake_log "coffeescript" "compiling" "src/foo/test.coffee"
#
# @param $1 Action
# @param $2 Description
bake_log () {
    echo -e "      $1\t${2}"
}


# Prints an error message.
#
# @param $1 action
# @param $2 description
bake_error () {
    local description=${2:-}
    echo -e "${C_RED}ERROR $1\t${C_IRED}${description}${C_OFF}"
}


# Prints an info message.
#
# @param $1 action
# @param $2 description
bake_info () {
    local description=${2:-}
    echo -e "${C_CYAN}      $1\t${C_ICYAN}${description}${C_OFF}"
}


# Prints an ok message.
#
# @param $1 action
# @param $2 description
bake_ok () {
    local description=${2:-}
    echo -e "${C_GREEN}   OK ${C_IGREEN}$1\t${description}${C_OFF}"
}


# Exits the sript and prints our a message.
#
# @param $1 Exit code.
# @param $2 [optional] Message.
bake_exit() {
    local message=${2:-}
    [[ -n $message ]] && echo $message
    exit $1
}


# Determines if target file is outdated (older than) reference.
#
# @param $1 target
# @param $2 reference
# @returns 0 if outdated, else 1
outdated() {
    local target=$1
    local reference=$2

    # reference must exist
    [ ! -e $reference ] && bake_error "outdated" "Reference $2 not found" && return 1

    # outdated if target does not exist
    [ ! -e $target ] && return 0

    # outdated if target is older than reference
    [ $target -ot $reference ] && return 0

    return 1
}


# Main entry point into program.
main() {
    if [ "$bakefile" == "" ]; then
        upsearch Bakefile
        bakefile_dir=$bake_result
        bakefile=$bakefile_dir/Bakefile
    fi

    if [ -f $bakefile ]; then
        # allow included 'sub-bake' files to refer to top-level bake by $bake
        export bake="${this_bake} ${bakefile_dir}"

        # prepare variables for bake_params
        for arg in "$@"; do
          echo $arg | grep -Eq "\w+=(\w+)?"
          if [ "$?" == "0" ]; then
            # preserve quoted args by re-quoting before passing to eval
            eval "$(echo $arg | cut -d'=' -f1)='$(echo $arg | cut -d= -f2)'"
          fi
        done

        source $bakefile
        set +u

        if [ "_$1" == "_" ]; then
            task_list $bakefile && print_task_list
        else
            # ensure working directory is from Bakefile
            pushd $bakefile_dir >/dev/null
            if [[ $(type -t $1) == "function" ]]; then
                "$@"
            elif [[ $(type -t on_task_not_found) == "function" ]]; then
                on_task_not_found $@
                [[ $? -eq 1 ]] && task_list $bakefile && print_task_list
            else
                task_list $bakefile && print_task_list
            fi
            popd > /dev/null
        fi
    else
        echo Bakefile not found in current or parent directories.
        exit 1
    fi
}

# Creates a `Bakefile` in current directory.
create_bakefile() {
    [ -f ./Bakefile ] && return 1
    echo "#!/bin/bash

#. Runs a build task on the project
function build {
    bake_params task
    echo sample build \$task
}
" > Bakefile
    return 0
}

# Initializes the local directory with the `bake` script and sample `Bakefile`
local_init() {
    cp $0 .
    create_bakefile
    echo -e Bake copied locally. Run ${C_CYAN}./bake${C_OFF} to see it in action.
}

scriptdir() {
    local  __resultvar=$2
    local __real

    if [ -h $1 ]; then
        __real=$(dirname `readlink "$1"`)
    else
        __real=$(dirname "$1")
    fi
    # Symlinks are sometimes relative, so first move to where file is
    # then cd into real path
    eval $__resultvar="$(cd `dirname "$1"` && cd -P "$__real" && pwd )"
}

bake_app=`basename $0`
this_bake="$(cd `dirname $0` && pwd)/${bake_app}"
case "$1" in
    --install)
        if test -f /usr/local/bin/bake; then
            read -p 'A bake script already exists in /usr/local/bin.  Overwrite? (y/N)'
            test "$REPLY" == "y" || exit
        fi

        sudo ln -sf $PWD/bake /usr/local/bin
        ;;

    --init)
        create_bakefile && echo -e Bakefile created. Run ${C_CYAN}bake${C_OFF} to see it in action.
        ;;

    --init-local)
        local_init
        ;;

    *)
        if test "$1" == ""; then
            main "$@"
        elif test -f $1; then
            # allow scripts to be run by bake through #!
            # setting the bake_app displays usage with the script name instead of `bake`
            bake_app=`basename $1`
            bakefile=$1
            bakefile_dir=$PWD
            shift
            main "$@"
        elif test -d $1; then
            if test -f $1/Bakefile; then
                # allow scripts to be run by bake through #!
                # setting the bake_app displays usage with the script name instead of `bake`
                bake_app=bake
                bakefile_dir=$(cd $1 && pwd)
                bakefile=$bakefile_dir/Bakefile
                shift
                main "$@"
            else
                main "$@"
            fi
        else
            main "$@"
        fi
        ;;
esac

